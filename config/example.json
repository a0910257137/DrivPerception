{
    "batch_size": 8,
    "epochs": 100,
    "learn_rate": 0.001,
    "model_path": "/aidata/anders/autosys/archives/try",
    "summary": {
        "scalar_freq": 50,
        "hist_freq": 150,
        "img_freq": 250,
        "log_dir": "/aidata/anders/autosys/archives/try/logs/"
    },
    "data_reader": {
        "max_obj_num": 30,
        "resize_size": [
            384, // height
            640 // width
        ],
        "img_down_ratio": 1.0, //[height, width]
        "coors_down_ratio": [1.0, 1.0], //[height, width]
        "shuffle": true,
        "tasks": [{
            "preprocess": "obj_det",
            "read_img": true,
            "num_lnmks": 2,
            "category_path": "./config/ids.txt",
            "train_folder": "/aidata/anders/autosys/tf_records/train",
            "test_folder": "/aidata/anders/autosys/tf_records/test"
        }],
        "augments": {
            "color_chains": [
                "contrast",
                "saturat",
                "bright",
                "hue"
            ],
            "tensorpack_chains": ["Flip"], //"CropTransform", "WarpAffineTransform","RandomPaste","JpegNoise","GaussianNoise","SaltPepperNoise", "RandomSquareCrop"
            "album_chains": {
                "cutout": {
                    "max_holes": 15,
                    "min_holes": 5,
                    "max_height": 30,
                    "max_width": 30,
                    "min_height": 10,
                    "min_width": 10,
                    "fill_value": 0
                }
            },
            "do_flip": true
        }
    },
    "models": {
        "model_name": "anchor_obj_det",
        "frozen_backbone": false,
        "multi_optimizer": false,
        "optimizer": "adam",
        "backbone": {
            "module_name": "mobilenextnet",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "block_cfg":[
                ["Focus", [32, 3, 1]], // 0
                ["Conv", [64, 3, 2]], // 1
                ["BottleneckCSP", [64, 64, 1]], // 2
                ["Conv", [128, 3, 2]], // 3
                ["BottleneckCSP", [128, 128, 3]], // 4
                ["Conv", [256, 3, 2]], // 5
                ["BottleneckCSP", [256, 256, 3]], // 6
                ["Conv", [512, 3, 2]], // 7
                ["SPP", [512, [5, 9, 13]]] // 8
            ]
        },
        "neck": {
            "module_name": "pafpn",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "block_cfg":[
                ["BottleneckCSP", [512, 512, 1, false]], // 9 (0)
                ["Conv", [256, 1, 1]], // 10 (1)
                ["Upsample", [2, "nearest"]], // 11 (2)
                ["Concat", [1]], // 12 (3)
                ["BottleneckCSP", [512, 256, 1, false]], // 13 (4)
                ["Conv", [128, 1, 1]], // 14 (5)
                ["Upsample", [2, "nearest"]], // 15 (6)
                ["Concat", [0]], // 16 (7)
                ["BottleneckCSP", [256, 128, 1, false]], // 17 (8)
                ["Conv", [128, 3, 2]], // 18 (9)
                ["Concat", [5]], // 19 (10)
                ["BottleneckCSP", [256, 256, 1, false]], // 20 (11) 
                ["Conv", [256, 3, 2]], // 21 (12)
                ["Concat", [1]], // 22 (13)
                ["BottleneckCSP", [512, 512, 1, false]] // 23 (14)
            ],
            "encoder_idx":7,
            "head_output":[8, 11, 14]
        },
        "head": {
            "module_name": "head",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "num_classes": 1,
            "anchors":[
                [3, 9, 5, 11, 4, 20], 
                [7, 18, 6, 39, 12, 31], 
                [19, 50, 38, 81, 68, 157]
            ],
            "in_channels":[128, 256, 512],
            "strides":[8, 16, 32],
            "block_cfg":[
                ["Conv", [128, 3, 1]], // 25 (0)
                ["Upsample", [2, "nearest"]], // 26 (1)
                ["BottleneckCSP", [128, 64, 1, false]], // 27 (2)
                ["Conv", [128, 3, 1]], // 28 (3)
                ["Upsample", [2, "nearest"]], // 29 (4)
                ["Conv", [16, 3, 1]], // 30 (5)
                ["BottleneckCSP", [16, 8, 1, false]], // 31 (6)
                ["Upsample", [2, "nearest"]], // 32 (7)
                ["Conv", [2, 3, 1]], // 33 (8) Driving area segmentation head
                
                ["Conv", [128, 3, 1]], // 34 (9)
                ["Upsample", [2, "nearest"]], // 35 (10)
                ["BottleneckCSP", [128, 64, 1, false]], // 36 (11) 
                ["Conv", [32, 3, 1]], // 37 (12)
                ["Upsample", [2, "nearest"]], // 38 (13)
                ["Conv", [16, 3, 1]], // 39 (14)
                ["BottleneckCSP", [16, 8, 1, false]], // 40 (15)
                ["Upsample", [2, "nearest"]], // 41 (16)
                ["Conv", [2, 3, 1]] // 42 (17) Lane line segmentation head
            ],
            "area_seg_idx":8,
            "lane_seg_idx":17

        },
        "loss": {
            "module_name": "anchor_loss",
            "num_classes": 2,
            "multi_head_lambda": null,
            "fl_gamma": 0.0, // focal loss gamma
            "cls_pos_weight": 1.0, // classification loss positive weights
            "obj_pos_weight": 1.0, // object loss positive weights
            "seg_pos_weight": 1.0, // segmentation loss positive weights
            "box_gain" : 0.05, // box loss gain
            "cls_gain": 0.5, // classification loss gain
            "obj_gain": 1.0, // object loss gain
            "da_seg_gain": 0.2, // driving area segmentation loss gain
            "ll_seg_gain": 0.2, // lane line segmentation loss gain
            "ll_iou_gain": 0.2, // lane line iou loss gain
            "seg_only": false, // Only train two segmentation branchs
            "det_only": false, // Only train detection branch
            "enc_seg_only": false, // Only train encoder and two segmentation branchs
            "enc_det_only": false, // Only train encoder and detection branch
            // if training 3 tasks end-to-end, set all parameters as True
            // Alternating optimization
            // Single task
            "drivable_only": false, // Only train da_segmentation task
            "lane_only": false// Only train ll_segmentation task
        }
    }
}