{
    "batch_size": 8,
    "epochs": 100,
    "learn_rate": 0.001,
    "model_path": "/aidata/anders/autosys/archives/YOLOPv2",
    "summary": {
        "scalar_freq": 50,
        "hist_freq": 150,
        "img_freq": 250,
        "log_dir": "/aidata/anders/autosys/archives/YOLOPv2/logs/"
    },
    "data_reader": {
        "max_obj_num": 30,
        "resize_size": [
            384, // height
            640 // width
        ],
        "img_down_ratio": 1.0, //[height, width]
        "coors_down_ratio": [1.0, 1.0], //[height, width]
        "shuffle": true,
        "tasks": [{
            "preprocess": "obj_det",
            "read_img": true,
            "num_lnmks": 2,
            "category_path": "./config/ids.txt",
            "train_folder": "/aidata/anders/autosys/tf_records/train",
            "test_folder": "/aidata/anders/autosys/tf_records/test"
        }],
        "augments": {
            "color_chains": [
                "contrast",
                "saturat",
                "bright",
                "hue"
            ],
            "tensorpack_chains": ["Flip"], //"CropTransform", "WarpAffineTransform","RandomPaste","JpegNoise","GaussianNoise","SaltPepperNoise", "RandomSquareCrop"
            "album_chains": {
                "cutout": {
                    "max_holes": 15,
                    "min_holes": 5,
                    "max_height": 30,
                    "max_width": 30,
                    "min_height": 10,
                    "min_width": 10,
                    "fill_value": 0
                }
            },
            "do_flip": true
        }
    },
    "models": {
        "model_name": "anchor_obj_det",
        "frozen_backbone": false,
        "multi_optimizer": false,
        "optimizer": "adam",
        "backbone": {
            "module_name": "mobilenextnet",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "block_cfg":[
                [-1, 1, "Conv", [32, 3, 1]], // 0
                [-1, 1, "Conv", [64, 3, 2]], // 1 [1-P1/2]
                [-1, 1, "Conv", [64, 3, 1]], // 2
                
                [-1, 1, "Conv", [128, 3, 2]],// 3 [3-P2/4]
                [-1, 1, "Conv", [64, 1, 1]], // 4
                [-2, 1, "Conv", [64, 1, 1]], // 5
                [-1, 1, "Conv", [64, 3, 1]], // 6
                [-1, 1, "Conv", [64, 3, 1]], // 7
                [-1, 1, "Conv", [64, 3, 1]], // 8
                [-1, 1, "Conv", [64, 3, 1]], // 9
                [[-1, -3, -5, -6], 1, "Concat", [0]],      // 10
                [-1, 1, "Conv", [256, 1, 1]],// 11
                
                [-1, 1, "MP", []],           // 12
                [-1, 1, "Conv", [128, 1, 1]],// 13
                [-3, 1, "Conv", [128, 1, 1]],// 14
                [-1, 1, "Conv", [128, 3, 2]],// 15
                [[-1, -3], 1, "Concat", [1]],      // 16 [16-P3/8]
                [-1, 1, "Conv", [128, 1, 1]],// 17
                [-2, 1, "Conv", [128, 1, 1]],// 18
                [-1, 1, "Conv", [128, 3, 1]],// 19
                [-1, 1, "Conv", [128, 3, 1]],// 20
                [-1, 1, "Conv", [128, 3, 1]],// 21
                [-1, 1, "Conv", [128, 3, 1]],// 22
                [[-1, -3, -5, -6], 1, "Concat", [1]],      // 23
                [-1, 1, "Conv", [512, 1, 1]],// 24
            
                [-1, 1, "MP", []],           // 25
                [-1, 1, "Conv", [256, 1, 1]],// 26
                [-3, 1, "Conv", [256, 1, 1]],// 27
                [-1, 1, "Conv", [256, 3, 2]],// 28
                [[-1, -3], 1, "Concat", [1]],      // 29 [29-P4/16]
                [-1, 1, "Conv", [256, 1, 1]],// 30
                [-2, 1, "Conv", [256, 1, 1]],// 31
                [-1, 1, "Conv", [256, 3, 1]],// 32
                [-1, 1, "Conv", [256, 3, 1]],// 33
                [-1, 1, "Conv", [256, 3, 1]],// 34
                [-1, 1, "Conv", [256, 3, 1]],// 35
                [[-1, -3, -5, -6], 1, "Concat", [1]],      // 36
                [-1, 1, "Conv", [1024, 1, 1]],//37
                
                [-1, 1, "MP", []],           // 38
                [-1, 1, "Conv", [512, 1, 1]],// 39
                [-3, 1, "Conv", [512, 1, 1]],// 40
                [-1, 1, "Conv", [512, 3, 2]],// 41
                [[-1, -3], 1, "Concat", [1]],      // 42 [42-P5/32]
                [-1, 1, "Conv", [256, 1, 1]],// 43
                [-2, 1, "Conv", [256, 1, 1]],// 44
                [-1, 1, "Conv", [256, 3, 1]],// 45
                [-1, 1, "Conv", [256, 3, 1]],// 46
                [-1, 1, "Conv", [256, 3, 1]],// 47
                [-1, 1, "Conv", [256, 3, 1]],// 48
                [[-1, -3, -5, -6], 1, "Concat", [1]],      // 49
                [-1, 1, "Conv", [1024, 1, 1]],//50
                [-1, 1, "SPPCSPC", [512]] //51
            ],
            "output_idx":[24, 37, 51]
        },
        "neck": {
            "module_name": "pafpnx",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "block_cfg":[
                [-1, 1, "Conv", [256, 1, 1]], // 52 (0)
                [-1, 1, "Upsample", [2, "nearest"]], // 53 (1)
                [37, 1, "Conv", [256, 1, 1]], // 54 (2)
                [[-1, -2], 1, "Concat", [1]], // 55 (3)
                
                [-1, 1, "Conv", [256, 1, 1]], // 56 (4)
                [-2, 1, "Conv", [256, 1, 1]], // 57 (5)
                [-1, 1, "Conv", [128, 3, 1]], // 58 (6)
                [-1, 1, "Conv", [128, 3, 1]], // 59 (7)
                [-1, 1, "Conv", [128, 3, 1]], // 60 (8)
                [-1, 1, "Conv", [128, 3, 1]], // 61 (9)
                [[-1, -2, -3, -4, -5, -6], 1, "Concat", [1]], // 62 (10)
                [-1, 1, "Conv", [256, 1, 1]], // 63 (11)
                
                [-1, 1, "Conv", [128, 1, 1]], // 64 (12)
                [-1, 1, "Upsample", [2, "nearest"]], // 65 (13)
                [24, 1, "Conv", [128, 1, 1]], // 66 # route backbone P3 (14)
                [[-1, -2], 1, "Concat", [1]], // 67 (15)

                [-1, 1, "Conv", [128, 1, 1]], // 68 (16)
                [-2, 1, "Conv", [128, 1, 1]], // 69 (17)
                [-1, 1, "Conv", [64, 3, 1]],  // 70 (18)
                [-1, 1, "Conv", [64, 3, 1]],  // 71 (19)
                [-1, 1, "Conv", [64, 3, 1]],  // 72 (20)
                [-1, 1, "Conv", [64, 3, 1]],  // 73 (21)
                [[-1, -2, -3, -4, -5, -6], 1, "Concat", [1]], // 74 (22)
                [-1, 1, "Conv", [128, 1, 1]], // 75 (23)

                [-1, 1, "MP", []],            // 76 (24)
                [-1, 1, "Conv", [128, 1, 1]], // 77 (25)
                [-3, 1, "Conv", [128, 1, 1]], // 78 (26)
                [-1, 1, "Conv", [128, 3, 2]], // 79 (27)
                [[-1, -3, 63], 1, "Concat", [1]],// 80 (28)

                [-1, 1, "Conv", [256, 1, 1]], // 81 (29)
                [-2, 1, "Conv", [256, 1, 1]], // 82 (30)
                [-1, 1, "Conv", [128, 3, 1]], // 83 (31)
                [-1, 1, "Conv", [128, 3, 1]], // 84 (32)
                [-1, 1, "Conv", [128, 3, 1]], // 85 (33)
                [-1, 1, "Conv", [128, 3, 1]], // 86 (34)
                [[-1, -2, -3, -4, -5, -6], 1, "Concat", [1]], // 87 (35)
                [-1, 1, "Conv", [256, 1, 1]], // 88 (36)
    
                [-1, 1, "MP", []], // 89 (37)
                [-1, 1, "Conv", [256, 1, 1]], // 90 (38)
                [-3, 1, "Conv", [256, 1, 1]], // 91 (39)
                [-1, 1, "Conv", [256, 3, 2]], // 92 (40)
                [[-1, -3, 51], 1, "Concat", [1]], // 93 (41)

                [-1, 1, "Conv", [512, 1, 1]], // 94 (42)
                [-2, 1, "Conv", [512, 1, 1]], // 95 (43)
                [-1, 1, "Conv", [256, 3, 1]], // 96 (44)
                [-1, 1, "Conv", [256, 3, 1]], // 97 (45)
                [-1, 1, "Conv", [256, 3, 1]], // 98 (46)
                [-1, 1, "Conv", [256, 3, 1]], // 99 (47)
                [[-1, -2, -3, -4, -5, -6], 1, "Concat", [1]], // 100 (48)
                [-1, 1, "Conv", [512, 1, 1]], // 101 (49)
                [75, 1, "RepConv", [256, 3, 1]], // 102 (50)
                [88, 1, "RepConv", [512, 3, 1]], // 103 (51)
                [101, 1, "RepConv", [1024, 3, 1]] // 104 (50)
            ],
            "da_encoder_idx":55,
            "ll_encoder_idx":67,
            "head_output":[102, 103, 104]
        },
        "head": {
            "module_name": "headx",
            "optimizer": "adam",
            "num_vars": null,
            "variables": null,
            "lr": 1e-3,
            "num_classes": 1,
            "anchors":[
                [3, 9, 5, 11, 4, 20], 
                [7, 18, 6, 39, 12, 31], 
                [19, 50, 38, 81, 68, 157]
            ],
            "in_channels":[128, 256, 512],
            "strides":[8, 16, 32],
            "det_block_cfg":[
                [[102, 103, 104], 1, "IDetect", [1, [
                                                [3, 9, 5, 11, 4, 20], 
                                                [7, 18, 6, 39, 12, 31], 
                                                [19, 50, 38, 81, 68, 157]]]]   // Detect(P3, P4, P5)
            ],
            "da_block_cfg":[
                [-1, 1, "Conv", [256, 3, 1, "bn", "silu"]], // 0
                [-1, 1, "Upsample", [2, "nearest"]], // 1
                [-1, 1, "BottleneckCSP", [256, 128, 1, "silu", "leaky_relu"]], // 1
                [-1, 1, "Conv", [64, 3, 1, "bn", "silu"]], // 2
                [-1, 1, "Upsample", [2, "nearest"]], // 3
                [-1, 1, "Conv", [32, 3, 1, "bn", "silu"]], // 4
                [-1, 1, "Upsample", [2, "nearest"]], // 5
                [-1, 1, "Conv", [16, 3, 1, "bn", "silu"]], // 6
                [-1, 1, "BottleneckCSP", [16, 8, 1, "silu", "leaky_relu"]], // 7
                [-1, 1, "Upsample", [2, "nearest"]], // 8
                [-1, 1, "Conv", [2, 3, 1, "bn", null]] // 9
            ],
            "ll_block_cfg":[
                [-1, 1, "SE", [256, 2]], // 0
                [-1, 1, "Conv", [128, 3, 1, "bn", "silu"]], // 1
                [-1, 1, "TransposeUp", [128, 2, 1, "bn", "silu"]], // 2
                [-1, 1, "BottleneckCSP", [128, 32, 1, "silu", "leaky_relu"]], // 3
                [-1, 1, "Conv", [64, 1, 1, "bn", "silu"]], // 4
                [-1, 1, "Conv", [32, 3, 1, "bn", "silu"]], // 5
                [-1, 1, "TransposeUp", [32, 2, 1, "bn", "silu"]], // 6
                [-1, 1, "Conv", [16, 3, 1, "bn", "silu"]], // 7
                [-1, 1, "BottleneckCSP", [16, 8, 1, "silu", "leaky_relu"]], // 8
                [-1, 1, "TransposeUp", [8, 2, 1, "bn", "silu"]], // 9
                [-1, 1, "Conv", [2, 3, 1, "bn", null]] // 10
            ]

        },
        "loss": {
            "module_name": "anchor_loss",
            "num_classes": 2,
            "multi_head_lambda": null,
            "fl_gamma": 0.0, // focal loss gamma
            "cls_pos_weight": 1.0, // classification loss positive weights
            "obj_pos_weight": 1.0, // object loss positive weights
            "seg_pos_weight": 1.0, // segmentation loss positive weights
            "box_gain" : 0.05, // box loss gain
            "cls_gain": 0.5, // classification loss gain
            "obj_gain": 1.0, // object loss gain
            "da_seg_gain": 0.2, // driving area segmentation loss gain
            "ll_seg_gain": 0.2, // lane line segmentation loss gain
            "ll_iou_gain": 0.2, // lane line iou loss gain
            "seg_only": false, // Only train two segmentation branchs
            "det_only": false, // Only train detection branch
            "enc_seg_only": false, // Only train encoder and two segmentation branchs
            "enc_det_only": false, // Only train encoder and detection branch
            // if training 3 tasks end-to-end, set all parameters as True
            // Alternating optimization
            // Single task
            "drivable_only": false, // Only train da_segmentation task
            "lane_only": false// Only train ll_segmentation task
        }
    }
}